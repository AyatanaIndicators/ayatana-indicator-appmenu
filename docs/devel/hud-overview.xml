<?xml version='1.0'?>


<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
  "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd">

<chapter>
  <title>Overview</title>

  <para>
    The HUD consists of the interface in the shell and a backend service, <literal>hud-service</literal>. This
    document attempts to describe the internal architecture of the service.
  </para>

  <para>
    The most important type in the service is <link linkend="HudSource"><type>HudSource</type></link>. This is
    an interface. Each source is an entity against which a search can be performed. There is one interface
    method: <link linkend="hud-source-search"><function>hud_source_search()</function></link>. This is the main
    mechanism by which queries are performed in the HUD. The interface also features a signal
    <link linkend="HudSource-changed"><function>::changed</function></link> that is emitted when the result of
    searching may have changed.
  </para>

  <para>
    Several implementations of <link linkend="HudSource"><type>HudSource</type></link> exist. A particular type
    of source that gathers possible search results is referred to as a "collector". There are two of these:
    <link linkend="HudMenuModelCollector"><type>HudMenuModelCollector</type></link> (for
    <link linkend="GDBusMenuModel"><type>GDBusMenuModel</type></link>) and
    <link linkend="HudDbusmenuCollector"><type>HudDbusmenuCollector</type></link> for Dbusmenu. These
    "collector" sources only function when targetted at a particular endpoint (ie: a unique name and object path
    on D-Bus). This is only useful for searching for items in one particular set of menus.
  </para>

  <para>
    <link linkend="HudSourceList"><type>HudWindowSource</type></link> acts as a multiplexer. It is responsible
    for determining the currently focused window and performing searches submitted to it against the correct
    collector for that window. Similarly, there are
    <link linkend="HudSourceList"><type>HudIndicatorSource</type></link> and
    <link linkend="HudSourceList"><type>HudAppIndicatorSource</type></link> for performing searches against the
    system and application indicators, respectively.
  </para>

  <para>
    Finally, there is <link linkend="HudSourceList"><type>HudSourceList</type></link> which functions as a list
    of multiple other <link linkend="HudSource"><type>HudSource</type></link>s (such that performing a search
    against the list gives the combined result of searches performed against each of the contained sources).
  </para>

  <para>
    The <literal>hud-service</literal> initialises itself by creating the window, indicator and appindicator
    sources and putting each of them into a <link linkend="HudSourceList"><type>HudSourceList</type></link>.
    This is the source against which all queries submitted to the service are executed.
  </para>

  <para>
    Collectors are essentially a collection of <link linkend="HudItem"><type>HudItem</type></link>s. Each item
    corresponds to an action that may appear in the results of a search made with the HUD. Items have a list of
    strings describing themselves (eg: <literal>['File', 'Open']</literal> or
    <literal>['Bluetooth', 'Settings...']</literal>) and some information about their origin (eg: the desktop
    file of the application or indicator that created them). An item can be disabled, in which case it will
    never appear in the results of a search. Items are activated using
    <link linkend="hud-item-activate"><function>hud_item_activate()</function></link> which is implemented by
    the collector in the appropriate way.
  </para>

  <para>
    The result of performing a search is a set of <link linkend="HudResult"><type>HudResult</type></link>s.
    Each result refers to <link linkend="HudItem"><type>HudItem</type></link> along with information about why
    that item matched, and how closely.
  </para>

  <para>
    The toplevel interface to performing a query is <link linkend="HudQuery"><type>HudQuery</type></link>. It
    takes a search string and a reference to a <link linkend="HudSource"><type>HudSource</type></link> to search
    (which, as implemented, is always the toplevel 'list' source). It submits the search to the source then
    sorts the results by relevence. If the source changes, it resubmits the search. The interface of
    <link linkend="HudQuery"><type>HudQuery</type></link> is an ordered sequence of results.
    <link linkend="HudQuery"><type>HudQuery</type></link> has its own
    <link linkend="HudQuery-changed"><function>::changed</function></link> signal.
  </para>

  <para>
    <literal>hud-service</literal> is essentially a simple D-Bus interface corresponding to
    <link linkend="HudQuery"><type>HudQuery</type></link> as used against the toplevel source list. New queries
    can be created using <function>StartQuery</function>. Queries can be destroyed using
    <function>CloseQuery</function>. <link linkend="HudItem"><type>HudItem</type></link>s corresponding to
    results from the query can be activated using <function>ExecuteQuery</function>. Finally, the
    <link linkend="HudQuery-changed"><function>::changed</function></link> signal is reported as the
    <function>UpdatedQuery</function> D-Bus signal.
  </para>
</chapter>
